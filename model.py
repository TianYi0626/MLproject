import torch.nn as nn

class CNN(nn.Module):
    def __init__(self, num_class=9, dropout_rate=0.4, kernel_size=3):
        super(CNN, self).__init__()
        # self.conv32 = nn.Conv1d(1, 32, kernel_size=kernel_size)
        # self.batch_norm32 = nn.BatchNorm1d(32)
        # self.relu32 = nn.ReLU()
        # self.pool32 = nn.MaxPool1d(kernel_size=2)
        
        self.conv64 = nn.Conv1d(1, 64, kernel_size=kernel_size)
        self.batch_norm64 = nn.BatchNorm1d(64)
        self.relu64 = nn.ReLU()
        self.pool64 = nn.MaxPool1d(kernel_size=2)

        self.conv128 = nn.Conv1d(64, 128, kernel_size=kernel_size)
        self.batch_norm128 = nn.BatchNorm1d(128)
        self.relu128 = nn.ReLU()
        self.pool128 = nn.MaxPool1d(kernel_size=2)

        self.conv256 = nn.Conv1d(128, 256, kernel_size=kernel_size)
        self.batch_norm256 = nn.BatchNorm1d(256)
        self.relu256 = nn.ReLU()
        self.pool256 = nn.MaxPool1d(kernel_size=2)
        
        self.conv512 = nn.Conv1d(256, 512, kernel_size=kernel_size)
        self.batch_norm512 = nn.BatchNorm1d(512)
        self.relu512 = nn.ReLU()
        self.pool512 = nn.MaxPool1d(kernel_size=2)

        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(512 * (65-kernel_size), 1024)  # Adjust based on new dimensions
        self.relu1 = nn.ReLU()
        self.dropout = nn.Dropout(dropout_rate)
        self.fc2 = nn.Linear(1024, 256)
        self.relu2 = nn.ReLU()
        # self.fc3 = nn.Linear(512, 256)
        # self.relu3 = nn.ReLU()
        # self.fc4 = nn.Linear(256, 128)
        # self.relu4 = nn.ReLU()
        self.fc5 = nn.Linear(256, 32)
        self.relu5 = nn.ReLU()
        self.fc6 = nn.Linear(32, num_class)

    def forward(self, x):
        # x = self.batch_norm32(self.relu32(self.conv32(x)))
        # x = self.pool32(x)
        x = self.batch_norm64(self.relu64(self.conv64(x)))
        x = self.pool64(x)
        x = self.batch_norm128(self.relu128(self.conv128(x)))
        x = self.pool128(x)
        x = self.batch_norm256(self.relu256(self.conv256(x)))
        x = self.pool256(x)
        x = self.batch_norm512(self.relu512(self.conv512(x)))
        x = self.pool512(x)
        x = self.flatten(x)
        x = self.fc1(x)
        x = self.relu1(x)
        x = self.dropout(x)
        x = self.fc2(x)
        x = self.relu2(x)
        x = self.dropout(x)
        # x = self.fc3(x)
        # x = self.relu3(x)
        # x = self.dropout(x)
        # x = self.fc4(x)
        # x = self.relu4(x)
        # x = self.dropout(x)
        x = self.fc5(x)
        x = self.relu5(x)
        x = self.dropout(x)
        x = self.fc6(x)
        return x
    
class sCNN(nn.Module):
    def __init__(self, num_class=9, dropout_rate=0.4, kernel_size=3):
        super(sCNN, self).__init__()
        # self.conv32 = nn.Conv1d(1, 32, kernel_size=kernel_size)
        # self.batch_norm32 = nn.BatchNorm1d(32)
        # self.relu32 = nn.ReLU()
        # self.pool32 = nn.MaxPool1d(kernel_size=2)
        
        self.conv64 = nn.Conv1d(1, 64, kernel_size=kernel_size)
        self.batch_norm64 = nn.BatchNorm1d(64)
        self.relu64 = nn.ReLU()
        self.pool64 = nn.MaxPool1d(kernel_size=2)

        self.conv128 = nn.Conv1d(64, 128, kernel_size=kernel_size)
        self.batch_norm128 = nn.BatchNorm1d(128)
        self.relu128 = nn.ReLU()
        self.pool128 = nn.MaxPool1d(kernel_size=2)

        self.conv256 = nn.Conv1d(128, 256, kernel_size=kernel_size)
        self.batch_norm256 = nn.BatchNorm1d(256)
        self.relu256 = nn.ReLU()
        self.pool256 = nn.MaxPool1d(kernel_size=2)

        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(256 * (129-kernel_size), 1024)  # Adjust based on new dimensions
        self.relu1 = nn.ReLU()
        self.dropout = nn.Dropout(dropout_rate)
        self.fc2 = nn.Linear(1024, 128)
        self.relu2 = nn.ReLU()
        self.fc3 = nn.Linear(128, 32)
        self.relu3 = nn.ReLU()
        self.fc4 = nn.Linear(32, num_class)

    def forward(self, x):
        # x = self.batch_norm32(self.relu32(self.conv32(x)))
        # x = self.pool32(x)
        x = self.batch_norm64(self.relu64(self.conv64(x)))
        x = self.pool64(x)
        x = self.batch_norm128(self.relu128(self.conv128(x)))
        x = self.pool128(x)
        x = self.batch_norm256(self.relu256(self.conv256(x)))
        x = self.pool256(x)
        x = self.flatten(x)
        x = self.fc1(x)
        x = self.relu1(x)
        x = self.dropout(x)
        x = self.fc2(x)
        x = self.relu2(x)
        x = self.dropout(x)
        x = self.fc3(x)
        x = self.relu3(x)
        x = self.dropout(x)
        x = self.fc4(x)
        return x